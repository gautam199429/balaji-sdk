/*
 * e-KYC API
 * e-KYC API , GST verification suite
 *
 * The version of the OpenAPI document: v1
 * Contact: gautam@balajimariline.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.model.BankAccountVerification;
import org.openapitools.client.model.MCACompanyMasterDataRequest;
import org.openapitools.client.model.MCASignatoryRequest;
import org.openapitools.client.model.ModelAPIResponse;
import org.openapitools.client.model.NSDLElectricityBillRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UtilityManagementApi
 */
@Ignore
public class UtilityManagementApiTest {

    private final UtilityManagementApi api = new UtilityManagementApi();

    
    /**
     * Get All Details
     *
     * Get Individual Details from DB
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllDetailsFromDBTest() {
        String filter = null;
        String X_AUTH_TOKEN = null;
        ModelAPIResponse response = api.getAllDetailsFromDB(filter, X_AUTH_TOKEN);

        // TODO: test validations
    }
    
    /**
     * Get Company Lite Details from NSDL
     *
     * Get MCA signatory details from NSDL
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCompanyLiteDetailsUtilityTest() {
        String X_AUTH_TOKEN = null;
        MCASignatoryRequest mcASignatoryRequest = null;
        ModelAPIResponse response = api.getCompanyLiteDetailsUtility(X_AUTH_TOKEN, mcASignatoryRequest);

        // TODO: test validations
    }
    
    /**
     * Get Electricity bill details
     *
     * Get Electricity bill details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getElectricityDetailsTest() {
        String X_AUTH_TOKEN = null;
        NSDLElectricityBillRequest nsDLElectricityBillRequest = null;
        ModelAPIResponse response = api.getElectricityDetails(X_AUTH_TOKEN, nsDLElectricityBillRequest);

        // TODO: test validations
    }
    
    /**
     * Get GSTIN details from GSP
     *
     * Get GSTIN status from GSP
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGSTINDetailsUtilityTest() {
        String gstin = null;
        String X_AUTH_TOKEN = null;
        ModelAPIResponse response = api.getGSTINDetailsUtility(gstin, X_AUTH_TOKEN);

        // TODO: test validations
    }
    
    /**
     * Get GSTIN status from GSP
     *
     * Get GSTIN status from GSP
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGSTINStatusUtilityTest() {
        String gstin = null;
        String X_AUTH_TOKEN = null;
        ModelAPIResponse response = api.getGSTINStatusUtility(gstin, X_AUTH_TOKEN);

        // TODO: test validations
    }
    
    /**
     * Get IEC details from NSDL
     *
     * Get IEC details from NSDL
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getIECDetailsUtilityTest() {
        String X_AUTH_TOKEN = null;
        MCASignatoryRequest mcASignatoryRequest = null;
        ModelAPIResponse response = api.getIECDetailsUtility(X_AUTH_TOKEN, mcASignatoryRequest);

        // TODO: test validations
    }
    
    /**
     * Get GSTIN preference from GSP
     *
     * Get GSTIN preference from GSP
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPreferenceDetailsGSTINUtilityTest() {
        String gstin = null;
        String fy = null;
        String X_AUTH_TOKEN = null;
        ModelAPIResponse response = api.getPreferenceDetailsGSTINUtility(gstin, fy, X_AUTH_TOKEN);

        // TODO: test validations
    }
    
    /**
     * Get MCA signatory details from NSDL
     *
     * Get MCA signatory details from NSDL
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSignatoryDetailsUtilityTest() {
        String X_AUTH_TOKEN = null;
        MCASignatoryRequest mcASignatoryRequest = null;
        ModelAPIResponse response = api.getSignatoryDetailsUtility(X_AUTH_TOKEN, mcASignatoryRequest);

        // TODO: test validations
    }
    
    /**
     * Get GSTIN track details from GSP
     *
     * Get GSTIN track details from GSP
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTrackDetailsGSTINUtilityTest() {
        String gstin = null;
        String fy = null;
        String type = null;
        String X_AUTH_TOKEN = null;
        ModelAPIResponse response = api.getTrackDetailsGSTINUtility(gstin, fy, type, X_AUTH_TOKEN);

        // TODO: test validations
    }
    
    /**
     * Update Company Master Details
     *
     * Update Company Master Details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCompanyMasterDetailsTest() {
        String X_AUTH_TOKEN = null;
        MCACompanyMasterDataRequest mcACompanyMasterDataRequest = null;
        ModelAPIResponse response = api.updateCompanyMasterDetails(X_AUTH_TOKEN, mcACompanyMasterDataRequest);

        // TODO: test validations
    }
    
    /**
     * Verify new bank details
     *
     * Verify new bank details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void verifyBankUtilityTest() {
        String X_AUTH_TOKEN = null;
        BankAccountVerification bankAccountVerification = null;
        ModelAPIResponse response = api.verifyBankUtility(X_AUTH_TOKEN, bankAccountVerification);

        // TODO: test validations
    }
    
    /**
     * Fetch PAN details from NSDL
     *
     * Fetch PAN details from NSDL
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void verifyPANumberTest() {
        String pan = null;
        String X_AUTH_TOKEN = null;
        ModelAPIResponse response = api.verifyPANumber(pan, X_AUTH_TOKEN);

        // TODO: test validations
    }
    
}
