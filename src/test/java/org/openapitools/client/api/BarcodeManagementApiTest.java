/*
 * e-KYC API
 * e-KYC API , GST verification suite
 *
 * The version of the OpenAPI document: v1
 * Contact: gautam@balajimariline.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.model.BarCodeShareRequestBody;
import org.openapitools.client.model.ModelAPIResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BarcodeManagementApi
 */
@Ignore
public class BarcodeManagementApiTest {

    private final BarcodeManagementApi api = new BarcodeManagementApi();

    
    /**
     * Create new barcode
     *
     * Create new barcode
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNewBarCodeTest() {
        String caseId = null;
        String X_AUTH_TOKEN = null;
        ModelAPIResponse response = api.createNewBarCode(caseId, X_AUTH_TOKEN);

        // TODO: test validations
    }
    
    /**
     * Get aadhar details from Barcode
     *
     * Get aadhar details Details from Barcode
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAadharDetailsTest() {
        String barcodeToken = null;
        ModelAPIResponse response = api.getAadharDetails(barcodeToken);

        // TODO: test validations
    }
    
    /**
     * Get all bank details from barcode
     *
     * Get all bank details from barcode
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllBankFromBarcodeTest() {
        String barcodeToken = null;
        ModelAPIResponse response = api.getAllBankFromBarcode(barcodeToken);

        // TODO: test validations
    }
    
    /**
     * Get company master details from barcode
     *
     * Get company master details from barcode
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCompanyMasterDetailsFromBarcodeTest() {
        String barcodeToken = null;
        ModelAPIResponse response = api.getCompanyMasterDetailsFromBarcode(barcodeToken);

        // TODO: test validations
    }
    
    /**
     * Fetch PAN details from Barcode
     *
     * Fetch PAN details from Barcode
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDetailsFromPanNumberBarcodeTest() {
        String barcodeToken = null;
        ModelAPIResponse response = api.getDetailsFromPanNumberBarcode(barcodeToken);

        // TODO: test validations
    }
    
    /**
     * Get all GSTIN From Barcode
     *
     * Get all GSTIN From Barcode
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDetailsGSTINBarcodeTest() {
        String barcodeToken = null;
        ModelAPIResponse response = api.getDetailsGSTINBarcode(barcodeToken);

        // TODO: test validations
    }
    
    /**
     * Get Electricity Bill Details from Barcode
     *
     * Get Electricity Bill Details from Barcode
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getElectricityDetails1Test() {
        String barcodeToken = null;
        ModelAPIResponse response = api.getElectricityDetails1(barcodeToken);

        // TODO: test validations
    }
    
    /**
     * Get GSTIN status from DB
     *
     * Get GSTIN status from DB
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGSTINStatusBarcodeTest() {
        String gstin = null;
        String barcode = null;
        ModelAPIResponse response = api.getGSTINStatusBarcode(gstin, barcode);

        // TODO: test validations
    }
    
    /**
     * Get IEC details from Barcode
     *
     * Get IEC details from Barcode
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getIECDetailsFromBarcodeTest() {
        String barcodeToken = null;
        ModelAPIResponse response = api.getIECDetailsFromBarcode(barcodeToken);

        // TODO: test validations
    }
    
    /**
     * Get GSTIN preference from DB
     *
     * Get GSTIN preference from DB
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPreferenceDetailsGSTINBarcodeTest() {
        String gstin = null;
        String fy = null;
        String barcode = null;
        ModelAPIResponse response = api.getPreferenceDetailsGSTINBarcode(gstin, fy, barcode);

        // TODO: test validations
    }
    
    /**
     * Get MCA signatory details from Barcode
     *
     * Get MCA signatory details from Barcode
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSignatoryDetailsFromBarcodeTest() {
        String barcodeToken = null;
        ModelAPIResponse response = api.getSignatoryDetailsFromBarcode(barcodeToken);

        // TODO: test validations
    }
    
    /**
     * Get GSTIN track details from DB
     *
     * Get GSTIN track details from DB
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTrackDetailsGSTINBarcodeTest() {
        String gstin = null;
        String fy = null;
        String type = null;
        String barcode = null;
        ModelAPIResponse response = api.getTrackDetailsGSTINBarcode(gstin, fy, type, barcode);

        // TODO: test validations
    }
    
    /**
     * Share Bar Code
     *
     * Share Bar Code
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sharebarCodeTest() {
        String X_AUTH_TOKEN = null;
        BarCodeShareRequestBody barCodeShareRequestBody = null;
        ModelAPIResponse response = api.sharebarCode(X_AUTH_TOKEN, barCodeShareRequestBody);

        // TODO: test validations
    }
    
}
